// File Lokasi: prisma/schema.prisma
// Versi dengan penambahan @@map untuk konsistensi nama tabel

// Konfigurasi generator Prisma Client
generator client {
  provider = "prisma-client-js"
  // output   = "../node_modules/.prisma/client" // Tentukan output jika perlu
}

// Konfigurasi datasource (koneksi database)
datasource db {
  provider = "mysql" // Menggunakan MySQL
  url      = env("DATABASE_URL") // URL koneksi diambil dari environment variable
}

// --- Enum untuk Role Pengguna ---
enum Role {
  SUPER_ADMIN
  YAYASAN
  REKTOR
  PR1
  PR2
  EMPLOYEE
}

// --- Enum untuk Status Absensi ---
enum AttendanceStatus {
  HADIR
  IZIN
  SAKIT
  ALPHA
  CUTI
  LIBUR
  SELESAI
  BELUM
  TERLAMBAT
}

// --- Enum untuk Tipe Perhitungan Potongan ---
enum DeductionCalculationType {
  FIXED_USER
  PERCENTAGE_USER
  PER_LATE_INSTANCE
  PER_ALPHA_DAY
  PERCENTAGE_ALPHA_DAY
  MANDATORY_PERCENTAGE
}

// --- Enum BARU untuk Status Payroll Run ---
enum PayrollRunStatus {
  PENDING_APPROVAL // Menunggu Persetujuan Yayasan
  APPROVED         // Disetujui oleh Yayasan
  REJECTED         // Ditolak oleh Yayasan
  // PROCESSING // Dihapus jika tidak relevan
  // COMPLETED // Dihapus jika tidak relevan
  // COMPLETED_WITH_ERRORS // Dihapus jika tidak relevan
}


// --- Model untuk NextAuth Adapter (Opsional) ---
// Jika Anda tidak menggunakan NextAuth.js, bagian ini bisa dihapus
model Account {
  id                String  @id @default(cuid()) @db.VarChar(191)
  userId            String  @db.VarChar(191)
  type              String  @db.VarChar(191)
  provider          String  @db.VarChar(191)
  providerAccountId String  @db.VarChar(191)
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String? @db.VarChar(191)
  scope             String? @db.VarChar(191)
  id_token          String? @db.Text
  session_state     String? @db.VarChar(191)
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts") // Map ke nama tabel 'accounts' (sudah benar)
}

model Session {
  id           String   @id @default(cuid()) @db.VarChar(191)
  sessionToken String   @unique @db.VarChar(191)
  userId       String   @db.VarChar(191)
  expires      DateTime @db.DateTime(3)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions") // Map ke nama tabel 'sessions' (sudah benar)
}

model VerificationToken {
  identifier String   @db.VarChar(191)
  token      String   @unique @db.VarChar(191)
  expires    DateTime @db.DateTime(3)

  @@unique([identifier, token])
  @@map("verification_tokens") // Map ke nama tabel 'verification_tokens' (sudah benar)
}
// --- Akhir Model NextAuth ---


// --- Model User ---
model User {
  id                String    @id @default(cuid()) @db.VarChar(191)
  name              String?   @db.VarChar(191)
  email             String    @unique @db.VarChar(191)
  password          String?   @db.VarChar(191)
  createdAt         DateTime  @default(now()) @db.DateTime(3)
  updatedAt         DateTime  @updatedAt @db.DateTime(3)
  role              Role      @default(EMPLOYEE)
  emailVerified     DateTime? @db.DateTime(3)
  image             String?   @db.VarChar(191)
  baseSalary        Decimal?  @db.Decimal(15, 2)

  // Relasi ke model lain
  accounts          Account[] // Hanya jika menggunakan NextAuth
  sessions          Session[] // Hanya jika menggunakan NextAuth
  attendanceRecords AttendanceRecord[]
  allowances        UserAllowance[]
  deductions        UserDeduction[]
  refreshTokens     RefreshToken[] @relation("UserRefreshTokens")

  // Relasi ke Payroll
  executedPayrollRuns PayrollRun[] @relation("ExecutedPayrollRuns")
  approvedPayrollRuns PayrollRun[] @relation("ApprovedPayrollRuns")
  rejectedPayrollRuns PayrollRun[] @relation("RejectedPayrollRuns")
  payslips          Payslip[]

  @@map("users") // Map ke nama tabel 'users' (sudah benar)
}


// --- Model Catatan Absensi ---
model AttendanceRecord {
  id            String   @id @default(cuid()) @db.VarChar(191)
  clockIn       DateTime @db.DateTime(3)
  clockOut      DateTime? @db.DateTime(3)
  createdAt     DateTime @default(now()) @db.DateTime(3)
  updatedAt     DateTime @updatedAt @db.DateTime(3)
  userId        String   @db.VarChar(191)
  latitudeIn    Decimal? @db.Decimal(9, 6)
  longitudeIn   Decimal? @db.Decimal(9, 6)
  latitudeOut   Decimal? @db.Decimal(9, 6)
  longitudeOut  Decimal? @db.Decimal(9, 6)
  status        AttendanceStatus @default(HADIR)
  selfieInUrl   String?  @db.Text
  selfieOutUrl  String?  @db.Text
  notes         String?  @db.Text

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, clockIn])
  @@index([userId, status])
  @@map("attendance_records") // Map ke nama tabel 'attendance_records' (sudah benar)
}


// --- Model Tunjangan ---
model AllowanceType {
  id             String  @id @default(cuid()) @db.VarChar(191)
  name           String  @unique @db.VarChar(191)
  description    String? @db.Text
  isFixed        Boolean @default(true)
  createdAt      DateTime @default(now()) @db.DateTime(3)
  updatedAt      DateTime @updatedAt @db.DateTime(3)
  userAllowances UserAllowance[]

  @@map("allowance_types") // Map ke nama tabel 'allowance_types' (sudah benar)
}

model UserAllowance {
  id              String        @id @default(cuid()) @db.VarChar(191)
  amount          Decimal       @db.Decimal(15, 2)
  userId          String        @db.VarChar(191)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  allowanceTypeId String        @db.VarChar(191)
  allowanceType   AllowanceType @relation(fields: [allowanceTypeId], references: [id], onDelete: Restrict)
  createdAt       DateTime      @default(now()) @db.DateTime(3)
  updatedAt       DateTime      @updatedAt @db.DateTime(3)

  @@unique([userId, allowanceTypeId])
  @@map("user_allowances") // Map ke nama tabel 'user_allowances' (sudah benar)
  @@index([userId])
  @@index([allowanceTypeId])
}


// --- Model Potongan ---
model DeductionType {
  id               String                   @id @default(cuid()) @db.VarChar(191)
  name             String                   @unique @db.VarChar(191)
  description      String?                  @db.Text
  calculationType  DeductionCalculationType
  ruleAmount       Decimal?                 @db.Decimal(15, 2)
  rulePercentage   Decimal?                 @db.Decimal(5, 2)
  isMandatory      Boolean?                 @default(false)
  createdAt        DateTime                 @default(now()) @db.DateTime(3)
  updatedAt        DateTime                 @updatedAt @db.DateTime(3)
  userDeductions   UserDeduction[]

  @@map("deduction_types") // Map ke nama tabel 'deduction_types' (sudah benar)
}

model UserDeduction {
  id                 String        @id @default(cuid()) @db.VarChar(191)
  userId             String        @db.VarChar(191)
  user               User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  deductionTypeId    String        @db.VarChar(191)
  deductionType      DeductionType @relation(fields: [deductionTypeId], references: [id], onDelete: Restrict)
  assignedAmount     Decimal?      @db.Decimal(15, 2)
  assignedPercentage Decimal?      @db.Decimal(5, 2)
  createdAt          DateTime      @default(now()) @db.DateTime(3)
  updatedAt          DateTime      @updatedAt @db.DateTime(3)

  @@unique([userId, deductionTypeId])
  @@map("user_deductions") // Map ke nama tabel 'user_deductions' (sudah benar)
  @@index([userId])
  @@index([deductionTypeId])
}


// --- Model Refresh Token JWT ---
model RefreshToken {
  id        String    @id @default(cuid()) @db.VarChar(191)
  jti       String    @unique // JWT ID
  userId    String    @db.VarChar(191)
  user      User      @relation("UserRefreshTokens", fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime  @db.DateTime(3)
  createdAt DateTime  @default(now()) @db.DateTime(3)
  revokedAt DateTime? @db.DateTime(3)

  @@index([userId])
  @@index([userId, jti])
  @@map("refresh_tokens") // Map ke nama tabel 'refresh_tokens'
}


// === MODEL PAYROLL ===

model PayrollRun {
  id              String           @id @default(cuid()) @db.VarChar(191)
  periodStart     DateTime         @db.Date
  periodEnd       DateTime         @db.Date
  executionDate   DateTime         @default(now()) @db.DateTime(3)
  status          PayrollRunStatus @default(PENDING_APPROVAL)

  executedById    String?          @db.VarChar(191)
  executedBy      User?            @relation("ExecutedPayrollRuns", fields: [executedById], references: [id], onDelete: SetNull)

  approvedById    String?          @db.VarChar(191)
  approvedBy      User?            @relation("ApprovedPayrollRuns", fields: [approvedById], references: [id], onDelete: SetNull)
  approvedAt      DateTime?        @db.DateTime(3)

  rejectedById    String?          @db.VarChar(191)
  rejectedBy      User?            @relation("RejectedPayrollRuns", fields: [rejectedById], references: [id], onDelete: SetNull)
  rejectedAt      DateTime?        @db.DateTime(3)
  rejectionReason String?          @db.Text

  payslips        Payslip[]

  createdAt       DateTime         @default(now()) @db.DateTime(3)
  updatedAt       DateTime         @updatedAt @db.DateTime(3)

  @@index([status])
  @@index([periodStart, periodEnd])
  @@map("payroll_runs") // Map ke nama tabel 'payroll_runs' (sudah benar)
}

model Payslip {
  id             String        @id @default(cuid()) @db.VarChar(191)
  payrollRunId   String        @db.VarChar(191)
  payrollRun     PayrollRun    @relation(fields: [payrollRunId], references: [id], onDelete: Cascade)
  userId         String        @db.VarChar(191)
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  baseSalary     Decimal       @db.Decimal(15, 2)
  totalAllowance Decimal       @default(0) @db.Decimal(15, 2)
  grossPay       Decimal       @default(0) @db.Decimal(15, 2)
  totalDeduction Decimal       @default(0) @db.Decimal(15, 2)
  netPay         Decimal       @default(0) @db.Decimal(15, 2)

  attendanceDays Int           @default(0)
  lateDays       Int           @default(0)
  alphaDays      Int           @default(0)

  items          PayslipItem[]
  createdAt      DateTime      @default(now()) @db.DateTime(3)
  updatedAt      DateTime      @updatedAt @db.DateTime(3)

  @@unique([payrollRunId, userId])
  @@index([userId])
  @@index([payrollRunId])
  @@map("payslips") // Map ke nama tabel 'payslips'
}

model PayslipItem {
  id          String    @id @default(cuid()) @db.VarChar(191)
  payslipId   String    @db.VarChar(191)
  payslip     Payslip   @relation(fields: [payslipId], references: [id], onDelete: Cascade)
  type        String    @db.VarChar(191) // "ALLOWANCE" atau "DEDUCTION"
  description String    @db.VarChar(191)
  amount      Decimal   @db.Decimal(15, 2)

  @@index([payslipId])
  @@map("payslip_items") // Map ke nama tabel 'payslip_items'
}

// === AKHIR MODEL PAYROLL ===
